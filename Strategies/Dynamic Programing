========================================
From Video: https://youtu.be/aPQY__2H3tE
========================================

Dynamic Programming
===================

1. Identifying and solving subproblems
2. Using subproblems together to solve larger problem.

5 Steps:
========
1. Fundemental Problem - Longest Increasing Subsequence(LIS)
============================================================

    Problem: Given a sequence of numbers of size n, find the length of the longest increasing subsequence
    i1 < i2 < ... < in and ai1 < ai2 < ... < aik

    LIS(3 1 8 2 5) : 3 which are 1 2 5

    1. Visualize examples:
        Visualize it as a DAG -> 3:14 in the video
   
    2. Find an appropriate subproblem
        - To know the appropriate subproblem we should first focus on what we know about the subproblem.
            - All increasing subsequences are subsets of original sequence.
            - All increasing subsequ3nce have a start and end
        - LIS[k] = LIS ending at index k -> This is the subproblem

    3. Find relationships among subproblems
        - Ask yourself questions
            - Eg, What subproblems are needed to solve LIS[4]
                Which are LIS[0], LIS[1] and LIS[3]

                So LIS[4] = 1 + max{LIS[0], LIS[1], LIS[3]} 
                          = 3

    4. Generalize the relationship
        - How do we solve subproblem LIS[5]?
        - LIS[4] = 1 + max{LIS[k] | k < 4, A[k] < A[4]}
        - General Statement is:
        
        LIS[n] = 1 + max{LIS[k] | k < n, A[k] < A[n]}

    5. Implement by solving subproblems in order
        - It is a matter of knowing which subproblem to solve and when.

        def lis(a):
            L = [1] * len(a)
            for i in range(1, len(L)):
                subproblems = [L[k] for k in range(i) if a[k] < a[i]]
                L[i] = 1 + max{subproblems, default = 0}
            return max(L, default=0)
    
    How do we actually get the sequence?
    ====================================
        - Just keep track if the previous indices.
